syntax = "proto3";
package syncano.codebox.script.v1;
option go_package = "github.com/Syncano/syncanoapis/gen/go/syncano/codebox/script/v1;script";

service ScriptRunner {
  // Run runs script in secure environment of worker.
  rpc Run (stream RunRequest) returns (stream RunResponse);
  // Delete deletes all containers for specified script index.
  rpc Delete (DeleteRequest) returns (DeleteResponse);
}

// Meta message specifies fields to describe what is being run.
message RunMeta {
  message Options {
    string entrypoint = 1; // If empty, uses default entrypoint for specified runtime.
    uint32 output_limit = 2; // If 0, will not hijack any output.
    int64 timeout = 3; // Timeout is meant to be in milliseconds. If 0 takes a default 30s value.
    uint32 mcpu = 4; // MCPU is CPU constaints in milliseconds. If 0 takes a default 250 value.
    uint32 async = 5; // Async defines if async connections should be used. Disabled by default.

    // Empty args, config, meta are acceptable.
    bytes args = 6;
    bytes config = 7;
    bytes meta = 8;
  }

  Options options = 1;
  string runtime = 2; // Runtime name.
  string source_hash = 3; // Unique hash describing script sources.
  string user_id = 4; // Unique key relevant for user context.
  string environment = 5; // Optional unique string describing script environment file.
}

message RunChunk {
  string name = 1;
  string filename = 2;
  string content_type = 3;
  bytes data = 4;

  enum Type {
    GENERIC = 0;
    ARGS = 1;
  }
  Type type = 5;
}

// RunRequest represents a Meta message and optionally repeated Chunk message.
message RunRequest {
  oneof value {
    RunMeta meta = 1;
    RunChunk chunk = 2;
  }
}

// HTTPResponseMessage describes custom response from script.
message HTTPResponse {
  int32 status_code = 1;
  string content_type = 2;
  bytes content = 3;
  map<string, string> headers = 4;
}

message RunResponse {
  int32 code = 1;
  bytes stdout = 2;
  bytes stderr = 3;
  HTTPResponse response = 4;
  int64 took = 5;
  bool cached = 6;
  int64 time = 7;
  uint32 weight = 8;
  string container_id = 9;
}

message DeleteRequest {
  string runtime = 1;
  string source_hash = 2;
  string user_id = 3;
}

message DeleteResponse {
  repeated string container_ids = 1;
}
